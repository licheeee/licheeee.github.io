<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python3基础知识]]></title>
    <url>%2F2018%2F12%2FPython3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[Python3的数据类型Python3的标准数据类型有6种： 1、数字（Number）不可变数据Python3支持int、float、bool和complex a, b, c, d = 20, 5.5, True, 4+3j 2、字符串（String）不可变数据可以放在&#39;&#39;或者是&quot;&quot;中，同时可以使用\转义，前面引号外面加上r表示原始字符，不进行转义Python3中没有字符的定义，一个字符即为只包含一个字符的字符串注意Python中字符串截取中的索引：变量[头下标:尾下标]其中，索引以0开始，-1为末尾的位置。截取时包含头下标，不包含尾下标。 str = &apos;Runoob&apos;print (str[0:-1]) # 输出第一个到倒数第二个的所有字符 3、列表（List）可变数据列表写在[]中间，元素用,隔开。列表中的元素的类型可以不同，支持数字、字符串、列表（嵌套）在截取的方式上，列表与字符串基本相似 list = [ &apos;abcd&apos;, 786 , 2.23, &apos;runoob&apos;, 70.2 ]print (list[1:3]) # 从第二个开始输出到第三个元素 4、元组(Tuple)不可变数据元组写在()中间字符串可以看作特殊的元组元组中可以包含可变的元素，例如列表构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则 tuple = ( &apos;abcd&apos;, 786 , 2.23, &apos;runoob&apos;, 70.2 )print (tuple[1:3]) # 从第二个开始输出到第三个元素tup1 = () # 空元组tup2 = (20,) # 一个元素，需要在元素后添加逗号 5、集合(Set)可变数据集合可以使用{}或者set()创建，其基本功能是进行成员关系测试和删除重复元素 student = &#123;&apos;Tom&apos;, &apos;Jim&apos;, &apos;Mary&apos;, &apos;Tom&apos;, &apos;Jack&apos;, &apos;Rose&apos;&#125;print(student) # 输出集合，重复的元素被自动去掉 # 成员测试if &apos;Rose&apos; in student : print(&apos;Rose 在集合中&apos;)else : print(&apos;Rose 不在集合中&apos;) # set可以进行集合运算a = set(&apos;abracadabra&apos;) 创建一个空集合必须用set()而不是{}，因为{}是用来创建一个空字典 6、字典(Dictionary)可变数据字典是一种映射类型，用{}标识，是一个无序的键(key) : 值(value)的集合同一个字段中的key必须唯一且为不可变类型列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取dict = &#123;&#125;dict[&apos;one&apos;] = &quot;1 - 菜鸟教程&quot;dict[2] = &quot;2 - 菜鸟工具&quot; tinydict = &#123;&apos;name&apos;: &apos;runoob&apos;,&apos;code&apos;:1, &apos;site&apos;: &apos;www.runoob.com&apos;&#125; print (dict[&apos;one&apos;]) # 输出键为 &apos;one&apos; 的值print (dict[2]) # 输出键为 2 的值print (tinydict) # 输出完整的字典print (tinydict.keys()) # 输出所有键print (tinydict.values()) # 输出所有值 Python3的运算符 1、成员运算符 in 2、身份运算符 is]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建自己的vpn]]></title>
    <url>%2F2017%2F11%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84vpn%2F</url>
    <content type="text"><![CDATA[从零开始搭建自己的vpn，主要是为了不需要在寻找或者购买各种自己也不确定的vpn的服务，更加稳定，也更加放心。写下这个教程也是为了自己以后搭建方便。 第一步，购买一个国外的vps第一步，需要我们购买一个国外的vps，通常价格在每月$5，也有部分服务商提供每月$2.5的vps，不过比较少，需要自己去找一找。当然，如果你是一名大学生，或者拥有一个edu的邮箱，那么可以通过GitHub的学生验证获得digitalocean的$50的代金券，相当于可以免费使用10个月了。在这里，以digitalocean为例，其他服务商过程应该类似。从我的digitalocean推广链接注册，可以额外获得$10的代金券，当然我也会。在打开的页面中输入邮箱和密码，点击create an account即可。在注册账号之后，需要填写一些个人信息。对于我们来说，最主要的里面有一项是需要进行付款方式的填写，有两个选择，信用卡或者PayPal，注意，储蓄卡应该是不可以的。我是申请了一张信用卡用来做国外的各种身份验证的，对于没有信用卡的同学来说可能需要注册PayPal。由于暂时我也没有注册过，暂且不表。注册完成登陆之后，点击右上角自己头像–settings–billing，在里面有一项“Promo code”，将自己通过GitHub获得的代码粘贴进去，点击apply code即可。刷新就应该可以看到自己的“Your credit”编程$50，我们就可以正式开始vps的购买。点击右上角绿色按钮create–Droplets，进入购买页面： Choose an image:我选择的是Debian 8.9 x64，如果你对其他的系统比较熟悉的话也可以选择其他的操作系统Choose a size:选择第一个$5/mo的就可以了，如果需要增加需求的话可以后续添加Choose a datacenter region:你可以通过测速来测试到各个机房的连接速度，一般选择洛杉矶或者纽约就可以，新加坡的线路好像绕的挺远的虽然我用的就是新加坡QAQ其余的选项跳过就可以，如果你自己知道需要什么的话可以自己继续添加。等待系统安装完毕后，digitalocean会有一封邮件发送到你的邮箱，里面包含了root账号的密码，以及ip等信息。 2018.1.17更新：digitalocean的套餐已经更新，5刀套餐升级内存为1GB，ssd升级为25GB。依然可以从我上面的推广链接中进入。 第二步，搭建ss服务有了vps的账号密码后，就可以登陆vps命令行进行操作了。如果你使用的是Windows，可以使用xshell登陆，或者如果你使用的是Windows10的话可以开启Linux子系统使用ssh登陆：ssh root@xxx.xxx.xxx.xxx然后输入密码回车即可。如果你使用的是macOS，同样可以开启终端使用ssh登陆，指令同上。如果登陆成功，命令行前面应该变成root@xxxx等类似的样子。第一次登陆，输入passwd修改登陆密码，注意，Linux系统输入密码是不会回显任何字符的，你只需要输入回车即可，成功的话会有提示的。接下来，我们正式进入ss服务的搭建。apt-get install python-pippip install shadowsocks 这样ss服务器已经安装在我们的vps上，接下来我们需要进行一些配置。vi /etc/shadowsocks.json 进行配置文件的填写。不知为何在digitalocean的vps上vim与vi的命令相同，使用vi可以稍微百度下看看如何使用，如果完全不出错的话可以按下面命令执行。“#”后面的注释不写。按i进入vi编辑模式&#123; &quot;server&quot;:&quot;服务器ip&quot;, #我们的服务器ip，假设为1.2.3.4 &quot;server_port&quot;:端口, #端口号可以自定义，比如4567 &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;连接密码&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;:false #其余均可保持不变&#125; 按esc退出编辑，:wq保存退出。 第三步，使用ss输入ssserver -c /etc/shadowsocks.json进行测试，应该就可以正常使用了。后台运行，输入ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop 也可以将ssserver -c /etc/shadowsocks.json -d start加入/etc/rc.local文件中，这样vps每次重启会自动运行。 第四步，锐速优化tcp连接锐速安装可以参考锐速优化。Debian8换内核参考Debian8更换内核。需要说明的是，如果vps内存只有512MB的话需要对文件进行配置，文件目录为/appex/etc/config。更多设置信息可以参考锐速设置 第五步 ss客户端 Windows可以下载shadowsocks客户端Linux可以使用shadowssocks-qt5客户端MacOS还没有试过iOS可以搜索wingsAndroid可以使用影梭 不想全局使用vpn的话可以使用chrome加switchyomega插件 switchyomega插件下选择AutoProxy选项，规则列表网址为https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt，更新即可。或者直接导入我的设置,或者在线导入https://licheeee.me/download/ss/OmegaOptions.bak github下搜索shadowsocks可以获得更多信息。 第六步 使你的ss可以代理IPv6使ss代理ipv6有什么用呢？当然是可以在本地只有ipv4的条件下访问ipv6的网站，各种pt了什么的，当然也有的学校会对ipv6进行免流，这样就可以通过ipv6代理免费上网。首先应该打开你的vps的ipv6服务，具体可以参考How To Enable IPv6 for DigitalOcean Droplets。然后需要对ss的配置进行一些更改： 将&quot;server&quot;:&quot;服务器ip&quot;, #我们的服务器ip，假设为1.2.3.4里面的服务器ip直接改写为::另外可以开启多端口port_passward整个shadowsocks.json变成：&#123; &quot;server&quot;:&quot;::&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;post_password&quot;: &#123; &quot;5678&quot;:&quot;连接密码&quot;， &quot;5679&quot;:&quot;连接密码&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;:false, &quot;workers&quot;:1 #使用客户数量限制&#125; 最后不要忘记在防火墙放行使用的端口。重启之后在你的浏览器上测试吧，比如直接登陆ipv6.google.com。 第六步 2019年的更新 1、使用Debian9，因为可以很方便的开启BBR，而不用在折腾锐速 2、一些参考资料 ssserver启动报错Debian9启动BBR设置开机启动]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>vpn</tag>
        <tag>ss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown学习]]></title>
    <url>%2F2017%2F08%2FMarkdown%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[第一次接触基于hexo的博客，稍微看一下Markdown的语法，以供以后写博客的时候使用。 1、 一级标题二级标题 三级标题······ 六级标题 2、加粗斜体删除线 int a//代码段 int a;int b; 这是引用 5.lichee.studio]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>web</tag>
      </tags>
  </entry>
</search>
